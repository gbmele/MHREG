## regnum variable input at command line
## 


## MY_COL1=1
## MY_COL2=3
awk -v c1=$MY_COL1 -v c2=$MY_COL2 '{printf "%s\t%s\n", $c1, $c2}' < data_file.txt


Note how the $1 and $3 in the original awk program are now $c1 and $c2 respectively and both of c1 and c2 variables are assigned values from the shell script variables using the -v parameter.

So now you can redefine which columns are extracted by changing the shell script variable while leaving the awk command alone.


### USAGE === D:\G>gawk -f registrarsAWK.txt regnum=24 w1.csv w2.csv w3.csv and so on till w13.csv
 
BEGIN{
  FILENUM=0
  dump = ""
  monday = 1
  sunday = 7
}

FNR == 1 { FILENUM++ 
           print "array[regs,wk"FILENUM"] of var int: week"FILENUM"=array2d(regs,wk"FILENUM",["
       }


{    ct = split($0,FIELDS,",")
     for(i=monday;i<=sunday;i++){                      ## day 1 to day 7
         printf FIELDS[i]",\t"
     }
      print "\t% reg" FNR " wk-" FILENUM" "FIELDS[8]" "FIELDS[9]      ##other fields
     if (FNR==regnum) {print "\n]); % end of week"FILENUM"\n" }
}

END{}

